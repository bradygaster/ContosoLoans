@page "/"
@using System.Globalization;
@inject IGrainFactory _grainFactory
@inject ILoanProcessOrchestratorGrain _loanProcessOrchestrator
@implements ILoanProcessOrchestratorGrainObserver
@implements IDisposable

<PageTitle>Loan Process Monitor</PageTitle>

<h1>Loan Process Monitor</h1>

Here you can observe the loans as they are processed in real time.

<table class="table">
    <thead>
        <tr>
            <th>Loan ID</th>
            <th>Loan Amount</th>
            <th>Application Received</th>
            <th>Last Update</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var loan in _loans) {
            <tr>
                <td>@loan.ApplicationId</td>
                <td>@loan.LoanAmount.ToString("C", CultureInfo.CreateSpecificCulture("en-US"))</td>
                <td>@loan.Received</td>
                <td>@loan.LastUpdate</td>
            </tr>
        }
    </tbody>
</table>

@code
{
    protected List<LoanApplication> _loans = new();
    ILoanProcessOrchestratorGrainObserver _reference;

    protected override async Task OnInitializedAsync() {
        _loans = await _loanProcessOrchestrator.GetLoansInProgress();
        _reference = _grainFactory.CreateObjectReference<ILoanProcessOrchestratorGrainObserver>(this);
        await _loanProcessOrchestrator.Subscribe(_reference);
    }

    public async Task OnAfterLoanApplicationProcessed(LoanApplication app) {
        _loans.RemoveAll(x => x.ApplicationId == app.ApplicationId);
        await RefreshTable();
    }

    public async Task OnAfterLoanProcessChecked(LoanApplication app) {
        _loans.RemoveAll(x => x.ApplicationId == app.ApplicationId);
        _loans.Add(app);
        await RefreshTable();
    }

    private async Task RefreshTable() {
        _loans = _loans.OrderBy(x => x.LastUpdate).ToList();
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
        => _loanProcessOrchestrator.Unsubscribe(_reference);
}